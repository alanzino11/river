{"ast":null,"code":"import _slicedToArray from \"/Users/npaul/river/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/npaul/river/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/npaul/river/src/Room.js\";\nimport React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\nimport Participant from './Participant';\n/* below: useEffect works much like the componentDid / WillMount lifecycle methods\nit is a function that takes a method and runs it once the component is rendered\nwhen our component loads we want to connect to the video service, if someone joins or leaves\nwe also need functions to handle */\n\nuseEffect(function () {\n  var participantConnected = function participantConnected(participant) {\n    setParticipants(function (prevParticipants) {\n      return [].concat(_toConsumableArray(prevParticipants), [participant]);\n    });\n  }; //like setState with spread operator\n\n\n  var participantDisconnected = function participantDisconnected(participant) {\n    setParticipants(function (prevParticipants) {\n      return prevParticipants.filter(function (p) {\n        return p !== participant;\n      });\n    }); //keep all particiapants who aren't the participant who left\n  };\n\n  Video.connect(token, {\n    name: roomName\n  }).then(function (room) {\n    setRoom(room);\n    room.on('participantConnected', participantConnected);\n    room.on('participantDisconnected', participantDisconnected);\n    room.participants.forEach(participantConnected);\n  }); //twilio method, pass in our token and set name as roomName\n  //using the promise .then, run functions to handle connections and dissconections\n  //using participantConnected loop through any existing participants adding them to the participants array\n\n  return function () {\n    setRoom(function (currentRoom) {\n      if (currentRoom && currentRoom.localParticipant.state === 'connected') {\n        currentRoom.localParticipant.tracks.forEach(function (trackPublication) {\n          trackPublication.track.stop();\n        });\n        currentRoom.disconnect();\n        return null;\n      } else {\n        return currentRoom;\n      }\n    });\n  }; //above: this is called above as the promise of twilio's Video.connect\n  //if local participant is connected then this function stops all local participant's tracks and disconnects all from room\n  //when ran upon first mount it will fault to else statement, when useEffect is called again it will run if line and do the clean up\n}, [roomName, token]);\n/*above: we pass the array of dependencies for our useEffect (ComponentDidMount)\nIf the variables have changed, we want to clean up first, then run the effect again. If they haven't changed there's no need to run the effect again.\nif the roomName or token to change we'd expect to connect to a different room (disconnect)\n*/\n\nvar Room = function Room(_ref) {\n  var roomName = _ref.roomName,\n      token = _ref.token,\n      handleLogout = _ref.handleLogout;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      room = _useState2[0],\n      setRoom = _useState2[1]; //synomous to state and setState\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      participants = _useState4[0],\n      setParticipants = _useState4[1];\n  /* above: First connect to the Twilio Video service using the token and room name. Upon connection\n  we will get a room object that we eill store, we will also store the list of paparticipants\n  which may change over time. Use useState to store, initial values set to null\n  */\n\n\n  var remoteParticipants = participants.map(function (participant) {\n    return React.createElement(Participant, {\n      key: participant.sid,\n      participant: participant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  });\n  /*  Above and below: map over the participants array to show the identity of each participant */\n\n  return React.createElement(\"div\", {\n    className: \"room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Room: \", roomName), React.createElement(\"button\", {\n    onClick: handleLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Log out\"), React.createElement(\"div\", {\n    className: \"local-participant\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, room ? React.createElement(Participant, {\n    key: room.localParticipant.sid,\n    participant: room.localParticipant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }) : ''), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Remote Participants\"), React.createElement(\"div\", {\n    className: \"remote-participants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, remoteParticipants));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/npaul/river/src/Room.js"],"names":["React","useState","useEffect","Video","Participant","participantConnected","participant","setParticipants","prevParticipants","participantDisconnected","filter","p","connect","token","name","roomName","then","room","setRoom","on","participants","forEach","currentRoom","localParticipant","state","tracks","trackPublication","track","stop","disconnect","Room","handleLogout","remoteParticipants","map","sid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\nimport Participant from './Participant';\n/* below: useEffect works much like the componentDid / WillMount lifecycle methods\nit is a function that takes a method and runs it once the component is rendered\nwhen our component loads we want to connect to the video service, if someone joins or leaves\nwe also need functions to handle */\n\n\nuseEffect(() => {\n    const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };  //like setState with spread operator\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      ); //keep all particiapants who aren't the participant who left\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on('participantConnected', participantConnected);\n      room.on('participantDisconnected', participantDisconnected);\n      room.participants.forEach(participantConnected);\n    }); //twilio method, pass in our token and set name as roomName\n  //using the promise .then, run functions to handle connections and dissconections\n  //using participantConnected loop through any existing participants adding them to the participants array\n \n  return () => {\n    setRoom(currentRoom => {\n      if (currentRoom && currentRoom.localParticipant.state === 'connected') {\n        currentRoom.localParticipant.tracks.forEach(function(trackPublication) {\n          trackPublication.track.stop();\n        });\n        currentRoom.disconnect();\n        return null;\n      } else {\n        return currentRoom;\n      }\n    });\n  };\n  //above: this is called above as the promise of twilio's Video.connect\n  //if local participant is connected then this function stops all local participant's tracks and disconnects all from room\n  //when ran upon first mount it will fault to else statement, when useEffect is called again it will run if line and do the clean up\n}, [roomName, token]);\n/*above: we pass the array of dependencies for our useEffect (ComponentDidMount)\nIf the variables have changed, we want to clean up first, then run the effect again. If they haven't changed there's no need to run the effect again.\nif the roomName or token to change we'd expect to connect to a different room (disconnect)\n*/\n\n\nconst Room = ({ roomName, token, handleLogout }) => {\n  const [room, setRoom] = useState(null); //synomous to state and setState\n  const [participants, setParticipants] = useState([]);\n  /* above: First connect to the Twilio Video service using the token and room name. Upon connection\n  we will get a room object that we eill store, we will also store the list of paparticipants\n  which may change over time. Use useState to store, initial values set to null\n  */\n\n\n const remoteParticipants = participants.map(participant => (\n    <Participant key={participant.sid} participant={participant} />\n  ));\n/*  Above and below: map over the participants array to show the identity of each participant */\n  return (\n    <div className=\"room\">\n      <h2>Room: {roomName}</h2>\n      <button onClick={handleLogout}>Log out</button>\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n          key={room.localParticipant.sid}\n          participant={room.localParticipant}\n        />\n        ) : (\n          ''\n        )}\n      </div>\n      <h3>Remote Participants</h3>\n      <div className=\"remote-participants\">{remoteParticipants}</div>\n    </div>\n  );\n};\n\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}