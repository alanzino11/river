{"ast":null,"code":"import _slicedToArray from \"/Users/npaul/river/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/npaul/river/src/Room.js\";\nimport React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\n\nvar Room = function Room(_ref) {\n  var roomName = _ref.roomName,\n      token = _ref.token,\n      handleLogout = _ref.handleLogout;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      room = _useState2[0],\n      setRoom = _useState2[1]; //synomous to state and setState\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      participants = _useState4[0],\n      setParticipants = _useState4[1];\n  /* above: First connect to the Twilio Video service using the token and room name. Upon connection\n  we will get a room object that we eill store, we will also store the list of paparticipants\n  which may change over time. Use useState to store, initial values set to null\n  */\n\n\n  var remoteParticipants = participants.map(function (participant) {\n    return React.createElement(\"p\", {\n      key: participant.sid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, participant.identity);\n  });\n  /*  Above and below: map over the participants array to show the identity of each participant */\n\n  return React.createElement(\"div\", {\n    className: \"room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Room: \", roomName), React.createElement(\"button\", {\n    onClick: handleLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Log out\"), React.createElement(\"div\", {\n    className: \"local-participant\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, room ? React.createElement(\"p\", {\n    key: room.localParticipant.sid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, room.localParticipant.identity) : ''), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Remote Participants\"), React.createElement(\"div\", {\n    className: \"remote-participants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, remoteParticipants));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/npaul/river/src/Room.js"],"names":["React","useState","useEffect","Video","Room","roomName","token","handleLogout","room","setRoom","participants","setParticipants","remoteParticipants","map","participant","sid","identity","localParticipant"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,cAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAuC;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,KAA0B,QAA1BA,KAA0B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,kBAC1BN,QAAQ,CAAC,IAAD,CADkB;AAAA;AAAA,MAC3CO,IAD2C;AAAA,MACrCC,OADqC,kBACV;;;AADU,mBAEVR,QAAQ,CAAC,EAAD,CAFE;AAAA;AAAA,MAE3CS,YAF2C;AAAA,MAE7BC,eAF6B;AAGlD;;;;;;AAMD,MAAMC,kBAAkB,GAAGF,YAAY,CAACG,GAAb,CAAiB,UAAAC,WAAW;AAAA,WACpD;AAAG,MAAA,GAAG,EAAEA,WAAW,CAACC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BD,WAAW,CAACE,QAAtC,CADoD;AAAA,GAA5B,CAA3B;AAGD;;AACE,SACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWX,QAAX,CADF,EAEE;AAAQ,IAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,GACH;AAAG,IAAA,GAAG,EAAEA,IAAI,CAACS,gBAAL,CAAsBF,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCP,IAAI,CAACS,gBAAL,CAAsBD,QAA1D,CADG,GAGH,EAJJ,CAHF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAVF,EAWE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCJ,kBAAtC,CAXF,CADF;AAeD,CA5BD;;AA+BA,eAAeR,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\n\nconst Room = ({ roomName, token, handleLogout }) => {\n  const [room, setRoom] = useState(null); //synomous to state and setState\n  const [participants, setParticipants] = useState([]);\n  /* above: First connect to the Twilio Video service using the token and room name. Upon connection\n  we will get a room object that we eill store, we will also store the list of paparticipants\n  which may change over time. Use useState to store, initial values set to null\n  */\n\n\n const remoteParticipants = participants.map(participant => (\n    <p key={participant.sid}>{participant.identity}</p>\n  ));\n/*  Above and below: map over the participants array to show the identity of each participant */\n  return (\n    <div className=\"room\">\n      <h2>Room: {roomName}</h2>\n      <button onClick={handleLogout}>Log out</button>\n      <div className=\"local-participant\">\n        {room ? (\n          <p key={room.localParticipant.sid}>{room.localParticipant.identity}</p>\n        ) : (\n          ''\n        )}\n      </div>\n      <h3>Remote Participants</h3>\n      <div className=\"remote-participants\">{remoteParticipants}</div>\n    </div>\n  );\n};\n\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}