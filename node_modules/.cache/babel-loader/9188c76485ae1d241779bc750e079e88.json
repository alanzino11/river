{"ast":null,"code":"import _regeneratorRuntime from \"/Users/npaul/river/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/npaul/river/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/npaul/river/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/npaul/river/src/VideoChat.js\";\nimport React, { useState, useCallback } from 'react';\n/*\nuseState is a function that takes a single argument, the initial state, \nthen returns array containing the current state and a function to update that state. \ndestructure that array to give us two distinct variables like state and setState. \ntrack the username, room name and token within our component.\n\nimported useState from react and set up states for the username, room name and token:\n*/\n\nvar VideoChat = function VideoChat() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      roomName = _useState4[0],\n      setRoomName = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      token = _useState6[0],\n      setToken = _useState6[1];\n\n  var handleUsernameChange = useCallback(function (event) {\n    setUsername(event.target.value);\n  }, []);\n  var handleRoomNameChange = useCallback(function (event) {\n    setRoomName(event.target.value);\n  }, []);\n  /*\n  The handle functions: Every time the handle functions are called they are redefined\n  useCallback is a react hook that allows us to hold static data, if the data is the same\n  between function calls then they won't get redefined\n  takes two arguments, the function to be memoized and an array of the function's dependencies (not used)\n  */\n\n  var handleSubmit = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(event) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              _context.next = 3;\n              return fetch('/video/token', {\n                method: 'POST',\n                body: JSON.stringify({\n                  identity: username,\n                  room: roomName\n                }),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }).then(function (res) {\n                return res.json();\n              });\n\n            case 3:\n              data = _context.sent;\n              setToken(data.token);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [username, roomName]);\n  /* The function above: When the user submits the form we send the username and room name \n  to the server to get access token to enter room\n  \n  use the fetch API to send the data as JSON to the endpoint, receive and parse the response, \n  then use setToken to store the token in our state. We'll also wrap this function with useCallback too, \n  but in this case the function will depend on the username and roomName, so we add those as the dependencies to useCallback\n  */\n\n  var handleLogout = useCallback(function (event) {\n    setToken(null);\n  }, []);\n  /* For the final function in this component we'll add a logout functionality. This will eject the user from a room and \n  return them to the lobby. To do so we will set the token to null.\n  */\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/npaul/river/src/VideoChat.js"],"names":["React","useState","useCallback","VideoChat","username","setUsername","roomName","setRoomName","token","setToken","handleUsernameChange","event","target","value","handleRoomNameChange","handleSubmit","preventDefault","fetch","method","body","JSON","stringify","identity","room","headers","then","res","json","data","handleLogout"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA;;;;;;;;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,kBACUF,QAAQ,CAAC,EAAD,CADlB;AAAA;AAAA,MACfG,QADe;AAAA,MACLC,WADK;;AAAA,mBAEUJ,QAAQ,CAAC,EAAD,CAFlB;AAAA;AAAA,MAEfK,QAFe;AAAA,MAELC,WAFK;;AAAA,mBAGIN,QAAQ,CAAC,IAAD,CAHZ;AAAA;AAAA,MAGfO,KAHe;AAAA,MAGRC,QAHQ;;AAKtB,MAAMC,oBAAoB,GAAGR,WAAW,CAAC,UAAAS,KAAK,EAAI;AAChDN,IAAAA,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFuC,EAErC,EAFqC,CAAxC;AAIA,MAAMC,oBAAoB,GAAGZ,WAAW,CAAC,UAAAS,KAAK,EAAI;AAChDJ,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFuC,EAErC,EAFqC,CAAxC;AAGF;;;;;;;AAOA,MAAME,YAAY,GAAGb,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAC,iBAAMS,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BA,cAAAA,KAAK,CAACK,cAAN;AAD6B;AAAA,qBAEVC,KAAK,CAAC,cAAD,EAAiB;AACvCC,gBAAAA,MAAM,EAAE,MAD+B;AAEvCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,QAAQ,EAAElB,QADS;AAEnBmB,kBAAAA,IAAI,EAAEjB;AAFa,iBAAf,CAFiC;AAMvCkB,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAN8B,eAAjB,CAAL,CAShBC,IATgB,CASX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eATQ,CAFU;;AAAA;AAEvBC,cAAAA,IAFuB;AAY7BnB,cAAAA,QAAQ,CAACmB,IAAI,CAACpB,KAAN,CAAR;;AAZ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,OAa3B,CAACJ,QAAD,EAAWE,QAAX,CAb2B,CAAhC;AAeA;;;;;;;;AAQA,MAAMuB,YAAY,GAAG3B,WAAW,CAAC,UAAAS,KAAK,EAAI;AACtCF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAF6B,EAE3B,EAF2B,CAAhC;AAIA;;;;AAGE,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAlDD","sourcesContent":["import React, { useState, useCallback } from 'react';\n\n/*\nuseState is a function that takes a single argument, the initial state, \nthen returns array containing the current state and a function to update that state. \ndestructure that array to give us two distinct variables like state and setState. \ntrack the username, room name and token within our component.\n\nimported useState from react and set up states for the username, room name and token:\n*/\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [token, setToken] = useState(null);\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n/*\nThe handle functions: Every time the handle functions are called they are redefined\nuseCallback is a react hook that allows us to hold static data, if the data is the same\nbetween function calls then they won't get redefined\ntakes two arguments, the function to be memoized and an array of the function's dependencies (not used)\n*/\n\nconst handleSubmit = useCallback(async event => {\n    event.preventDefault();\n    const data = await fetch('/video/token', {\n      method: 'POST',\n      body: JSON.stringify({\n        identity: username,\n        room: roomName\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json());\n    setToken(data.token);\n  }, [username, roomName]);\n\n/* The function above: When the user submits the form we send the username and room name \nto the server to get access token to enter room\n\nuse the fetch API to send the data as JSON to the endpoint, receive and parse the response, \nthen use setToken to store the token in our state. We'll also wrap this function with useCallback too, \nbut in this case the function will depend on the username and roomName, so we add those as the dependencies to useCallback\n*/\n\nconst handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n\n/* For the final function in this component we'll add a logout functionality. This will eject the user from a room and \nreturn them to the lobby. To do so we will set the token to null.\n*/\n  return <div></div> \n};\n\n"]},"metadata":{},"sourceType":"module"}